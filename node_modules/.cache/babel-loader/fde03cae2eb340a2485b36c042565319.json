{"ast":null,"code":"'use strict';\n\nvar https = require('https');\n\nvar http = require('http');\n\nvar jsonStatus = require('./statusmsgs.json');\n\nvar url = require('url');\n\nmodule.exports = Plotly;\n\nfunction Plotly(username, apiKey) {\n  if (!(this instanceof Plotly)) return new Plotly(username, apiKey);\n  var opts = {};\n\n  if (typeof username === 'object') {\n    opts = username;\n    this.username = opts.username;\n    this.apiKey = opts.apiKey;\n    this.host = opts.host || 'plot.ly';\n    this.port = opts.port || 443;\n  } else {\n    this.username = username;\n    this.apiKey = apiKey;\n    this.host = 'plot.ly';\n    this.port = 443;\n  }\n\n  this.streamHost = '';\n  this.version = '1.0.4';\n  this.platform = 'nodejs';\n  this.origin = 'plot';\n}\n\nPlotly.prototype.plot = function (data, graphOptions, callback) {\n  var self = this;\n\n  if (!callback) {\n    callback = function () {};\n  } // allow users to just pass in an object for the data, data = {x:[],y:[]}\n\n\n  if (!Array.isArray(data)) data = [data];\n  var urlencoded = '';\n  var pack = {\n    'platform': self.platform,\n    'version': self.version,\n    'args': JSON.stringify(data),\n    'kwargs': JSON.stringify(graphOptions),\n    'un': self.username,\n    'key': self.apiKey,\n    'origin': self.origin\n  };\n\n  for (var key in pack) {\n    urlencoded += key + '=' + pack[key] + '&';\n  } // trim off last ambersand\n\n\n  urlencoded = new Buffer(urlencoded.substring(0, urlencoded.length - 1), 'utf8');\n  var options = {\n    host: self.host,\n    port: self.port,\n    path: '/clientresp',\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Content-Length': urlencoded.length\n    },\n    withCredentials: false\n  };\n  var req = https.request(options, function (res) {\n    parseRes(res, function (err, body) {\n      /* Try to parse the response */\n      try {\n        body = JSON.parse(body);\n      } catch (e) {\n        callback(e);\n      }\n\n      if (body['stream-status'] != undefined) {\n        self.streamHost = url.parse(body['stream-host']).hostname;\n      }\n\n      if (body.error.length > 0) {\n        var error = new Error(body.error);\n        error.body = body;\n        error.statusCode = res.statusCode;\n        callback(error);\n      } else {\n        callback(null, {\n          streamstatus: body['stream-status'],\n          url: body.url,\n          message: body.message,\n          warning: body.warning,\n          filename: body.filename,\n          error: body.error\n        });\n      }\n    });\n  });\n  req.on('error', function (err) {\n    callback(err);\n  });\n  req.write(urlencoded);\n  req.end();\n};\n\nPlotly.prototype.stream = function (token, callback) {\n  var self = this;\n  var opts = {};\n\n  if (typeof token === 'object') {\n    opts = token;\n    token = opts.token;\n    var host = opts.streamHost || self.streamHost;\n    var port = opts.port || 80;\n  }\n\n  var options = {\n    host: host || self.streamHost || 'stream.plot.ly',\n    port: port || 80,\n    path: '/',\n    method: 'POST',\n    agent: false,\n    headers: {\n      'plotly-streamtoken': token\n    }\n  };\n\n  if (!callback) {\n    callback = function () {};\n  }\n\n  var stream = http.request(options, function (res) {\n    var message = jsonStatus[res.statusCode];\n\n    if (res.statusCode !== 200) {\n      var error = new Error(message);\n      error.statusCode = res.statusCode;\n      callback(error);\n    } else {\n      callback(null, {\n        msg: message,\n        statusCode: res.statusCode\n      });\n    }\n  });\n  stream.on('error', function (err) {\n    callback(err);\n  });\n  if (stream.setTimeout) stream.setTimeout(Math.pow(2, 32) * 1000);\n  return stream;\n};\n\nPlotly.prototype.getFigure = function (fileOwner, fileId, callback) {\n  var self = this;\n\n  if (!callback) {\n    callback = function () {};\n  }\n\n  var headers = {\n    'plotly-username': this.username,\n    'plotly-apikey': this.apiKey,\n    'plotly-version': this.version,\n    'plotly-platform': this.platform\n  };\n  var resource = '/apigetfile/' + fileOwner + '/' + fileId;\n  var options = {\n    host: self.host,\n    path: resource,\n    port: self.port,\n    headers: headers,\n    method: 'GET'\n  };\n  var req = https.get(options, function (res) {\n    parseRes(res, function (err, body) {\n      /* Try to parse the response */\n      try {\n        body = JSON.parse(body);\n      } catch (e) {\n        callback(e);\n      }\n\n      if (body.error) {\n        callback(body.error);\n      } else {\n        var figure = body.payload.figure;\n        callback(null, figure);\n      }\n    });\n  });\n  req.on('error', function (err) {\n    callback(err);\n  });\n  req.end();\n};\n\nPlotly.prototype.getImage = function (figure, opts, callback) {\n  callback = callback || function () {};\n\n  if (!figure) return new Error('no figure provided!');\n  var self = this;\n  var payload = JSON.stringify({\n    figure: figure,\n    format: opts.format || 'png',\n    width: opts.width || 700,\n    height: opts.height || 500\n  });\n  var headers = {\n    'plotly-username': self.username,\n    'plotly-apikey': self.apiKey,\n    'plotly-version': self.version,\n    'plotly-platform': self.platform,\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Content-Length': payload.length\n  };\n  var options = {\n    hostname: self.host,\n    path: '/apigenimage/',\n    port: self.port,\n    headers: headers,\n    method: 'POST',\n    agent: false\n  };\n\n  function handleResponse(res) {\n    if (res.statusCode !== 200) {\n      var error = new Error('Bad response status code ' + res.statusCode);\n      error.msg = res.body;\n      return callback(error, null);\n    }\n\n    callback(null, res);\n  }\n\n  var req = https.request(options, handleResponse);\n  req.on('error', function (err) {\n    callback(err);\n  });\n  req.write(payload);\n  req.end();\n};\n\nPlotly.prototype.deletePlot = function (fid, callback) {\n  if (!callback) callback = function () {};\n  var self = this; // Create the base64 authstring from buffer\n\n  var encodedAPIAuth = new Buffer(this.username + ':' + this.apiKey).toString('base64');\n  var options = {\n    host: 'api.plot.ly',\n    port: this.port,\n    path: '/v2/files/' + this.username + ':' + fid + '/trash',\n    method: 'POST',\n    agent: false,\n    withCredentials: true,\n    headers: {\n      'Plotly-Client-Platform': 'nodejs ' + this.version,\n      'authorization': 'Basic ' + encodedAPIAuth\n    }\n  };\n  var req = https.request(options, function (res) {\n    parseRes(res, function (err, body) {\n      if (res.statusCode === 200) {\n        callback(null, body);\n      } else {\n        var errObj = {\n          statusCode: res.statusCode,\n          err: body,\n          statusMessage: res.statusMessage\n        };\n        callback(errObj); // Pass out the error message from the backend\n      }\n    });\n  });\n  req.on('error', function (err) {\n    callback(err);\n  });\n  req.end();\n}; // response parse helper fn\n\n\nfunction parseRes(res, cb) {\n  var body = '';\n  if ('setEncoding' in res) res.setEncoding('utf-8');\n  res.on('data', function (data) {\n    body += data;\n\n    if (body.length > 1e10) {\n      // FLOOD ATTACK OR FAULTY CLIENT, NUKE REQ\n      res.connection.destroy();\n      res.writeHead(413, {\n        'Content-Type': 'text/plain'\n      });\n      res.end('req body too large');\n      return cb(new Error('body overflow'));\n    }\n  });\n  res.on('end', function () {\n    cb(null, body);\n  });\n}","map":null,"metadata":{},"sourceType":"script"}